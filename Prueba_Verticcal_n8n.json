{
  "name": "Prueba_Verticcal_n8n",
  "nodes": [
    {
      "parameters": {
        "path": "init-app",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        0,
        0
      ],
      "id": "6f80a69e-1c28-4eea-bbd3-77fdc1c271a2",
      "name": "Webhook",
      "webhookId": "1b4fae8d-18b9-4dff-b49c-df0b4ae7992c"
    },
    {
      "parameters": {
        "jsCode": "// Accede a los datos del nodo Webhook\n// Si usas GET, los datos están en la propiedad 'query'.\nconst params = $node[\"Webhook\"].json.query;\n\n// Array de parámetros permitidos\nconst allowedParams = ['location', 'budget_min', 'budget_max'];\n\n// 1. Verificación de si el objeto de parámetros está vacío\nif (Object.keys(params).length === 0) {\n  return [{ json: { message: \"No parameters received. All filters are optional, but if you send parameters, they must be valid.\" } }];\n}\n\n// 2. Verificación de parámetros extra no permitidos\nconst receivedParams = Object.keys(params);\nconst invalidParams = receivedParams.filter(p => !allowedParams.includes(p));\n\nif (invalidParams.length > 0) {\n  return[{\n    json: {\n      error: `Parametros invalidos recibidos: '${invalidParams.join(', ')}'. Solo se permiten 'location', 'budget_min', y 'budget_max'.`\n    }\n  }]\n}\n\n// Variables para los filtros validados\nlet location = null;\nlet budget_min = parseInt(params.budget_min, 10);\nlet budget_max = parseInt(params.budget_max, 10);;\n\n// Asignación de locación\nif (params.location) {\n  location = params.location;\n}\n\n// Validación de budget_min\nif (params.budget_min) {\n  if (isNaN(budget_min) || budget_min < 0) {\n    return [{\n      json: {\n        error: `Invalid budget_min: ${params.budget_min}. Must be a positive number.`\n      }\n    }];\n  }\n}\n\n// Validación de budget_max\nif (params.budget_max) {\n  if (isNaN(budget_max) || budget_max < 0) {\n    return [{\n      json: {\n        error: `Invalid budget_max: ${params.budget_max}. Must be a positive number.`\n      }\n    }];\n  }\n}\n\nif (budget_max<budget_min) {\nreturn [{\n    json: {\n      error: `Invalid budget range: budget_max (${budget_max}) cannot be less than budget_min (${budget_min}).`\n    }\n  }];}\n\n\n// Devuelve los parámetros validados para que los use el resto del flujo\nreturn [{\n  json: {\n    location: location,\n    budget_min: budget_min,\n    budget_max: budget_max\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        176,
        0
      ],
      "id": "5273e936-df71-41db-a317-cfae3df5c5db",
      "name": "Get_path_params"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "leads",
          "mode": "list",
          "cachedResultName": "leads"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -16,
        576
      ],
      "id": "c5ce28ae-8740-4a20-b21a-b29088ffa94e",
      "name": "Get_leads",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "nlLnbcXZjyxNMI4T",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the filtering parameters from the preceding node.\nconst filter_params = $node[\"Get_path_params\"].json;\n\nif (!items || items.length === 0) {\n  // Return a clear message indicating that no data was found.\n  return [{\n      json: {\n        message: `No se tiene información en la base de datos`\n      }\n    }];\n}\n\nlet filtered_leads = items.map(item => item.json);\n\n// --- Filtering Logic ---\n// Filter by location if the parameter exists.\nif (filter_params.location) {\n  filtered_leads = filtered_leads.filter(lead => lead.location === filter_params.location);\n}\n\n// Filter by minimum budget. Convert budget to a number for comparison.\nif (filter_params.budget_min) {\n  filtered_leads = filtered_leads.filter(lead => parseInt(lead.budget) >= parseInt(filter_params.budget_min));\n}\n\n// Filter by maximum budget. Convert budget to a number for comparison.\nif (filter_params.budget_max) {\n  filtered_leads = filtered_leads.filter(lead => parseInt(lead.budget) <= parseInt(filter_params.budget_max));\n}\n\n// Return the filtered list of leads.\n\nreturn filtered_leads;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        576
      ],
      "id": "2c9696f1-c5d1-48ca-8ce7-10ad87b07ab0",
      "name": "Filter_leads"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        688,
        352
      ],
      "id": "219d7686-3438-448a-9401-a5e0b036cb79",
      "name": "Respond to Webhook",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "operation": "toJson",
        "binaryPropertyName": "${JSON.stringify($node[\"Count_and_sort_budget\"].json)}",
        "options": {
          "format": true,
          "fileName": "leads_filtered.json"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        688,
        800
      ],
      "id": "5758d623-4e0a-455e-85cb-37c52c37b7b3",
      "name": "Convert_to_json"
    },
    {
      "parameters": {
        "jsCode": "const error = $node[\"Get_path_params\"].json;\n\nif(error.error || error.message){\n  return error;\n}\n\nconst message = $node[\"Filter_leads\"].json;\nif (message.message) {\n  return message;\n}\n\n// Simplifica el acceso a los datos del nodo\nconst leads = items.map(item => item.json);\n\n// 1. Calcula el presupuesto total\n// El método reduce itera sobre el array y suma cada valor de 'budget'.\nconst totalBudget = leads.reduce((sum, lead) => {\n  // Asegúrate de convertir el 'budget' a un número para la suma.\n  return sum + parseInt(lead.budget);\n}, 0); // El 0 es el valor inicial de la suma\n\n// 2. Ordena los leads de forma descendente por presupuesto\nconst sortedLeads = leads.sort((a, b) => {\n  // Convierte los valores a números para asegurar un ordenamiento correcto\n  return parseInt(b.budget) - parseInt(a.budget);\n});\n\n// 3. Retorna un único objeto JSON con los dos resultados\nreturn [{\n  json: {\n    total_budget: totalBudget,\n    sorted_leads: sortedLeads\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        464,
        576
      ],
      "id": "fc3afccb-0901-4737-b9ab-c9c0a4154ee5",
      "name": "Count_and_sort_budget"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "leads",
          "mode": "list",
          "cachedResultName": "leads"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "name",
              "displayName": "name",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "location",
              "displayName": "location",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "budget",
              "displayName": "budget",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        816,
        0
      ],
      "id": "269c4e40-c938-4c05-8f5f-14bca76e2f69",
      "name": "Insert rows in a table",
      "executeOnce": false,
      "credentials": {
        "postgres": {
          "id": "nlLnbcXZjyxNMI4T",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const data = [\n  {\n    \"id\": 1,\n    \"name\": \"Ana Salcedo\",\n    \"location\": \"Medellín\",\n    \"budget\": \"200000000\"\n  },\n  {\n    \"id\": 2,\n    \"name\": \"Santiago Gallo\",\n    \"location\": \"Medellín\",\n    \"budget\": \"500000000\"\n  },\n  {\n    \"id\": 3,\n    \"name\": \"Nicolle Rodríguez\",\n    \"location\": \"Medellín\",\n    \"budget\": \"650000000\"\n  },\n  {\n    \"id\": 4,\n    \"name\": \"Pablo Sánchez\",\n    \"location\": \"Bogotá\",\n    \"budget\": \"350000000\"\n  },\n  {\n    \"id\": 5,\n    \"name\": \"Andrés Arias\",\n    \"location\": \"Bogotá\",\n    \"budget\": \"150000000\"\n  },\n  {\n    \"id\": 6,\n    \"name\": \"Andrés Limas\",\n    \"location\": \"Bogotá\",\n    \"budget\": \"450000000\"\n  },\n  {\n    \"id\": 7,\n    \"name\": \"Santiago Garcia\",\n    \"location\": \"Bogota\",\n    \"budget\": \"2500000\"\n  }\n];\n\n// N8N requiere que los datos de salida estén en un formato específico, \n// un array de objetos con una propiedad 'json'.\nreturn data.map(item => ({ json: item }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        608,
        0
      ],
      "id": "1e74ec1a-073a-4874-8cd0-8ba7c3badf86",
      "name": "Insert_leads"
    },
    {
      "parameters": {
        "operation": "deleteTable",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "leads",
          "mode": "list",
          "cachedResultName": "leads"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        400,
        0
      ],
      "id": "9f0592b6-7806-4ccd-a3b6-688018441e22",
      "name": "Delete_rows",
      "credentials": {
        "postgres": {
          "id": "nlLnbcXZjyxNMI4T",
          "name": "Postgres account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Get_path_params",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get_path_params": {
      "main": [
        [
          {
            "node": "Delete_rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get_leads": {
      "main": [
        [
          {
            "node": "Filter_leads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter_leads": {
      "main": [
        [
          {
            "node": "Count_and_sort_budget",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Count_and_sort_budget": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          },
          {
            "node": "Convert_to_json",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert rows in a table": {
      "main": [
        [
          {
            "node": "Get_leads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert_leads": {
      "main": [
        [
          {
            "node": "Insert rows in a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete_rows": {
      "main": [
        [
          {
            "node": "Insert_leads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "32d2b2e8-44ff-4e03-8800-189b9010da77",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "debdf94920733e0d5a5271414b0a44514b92f314645132dd1f89fb5e001556c6"
  },
  "id": "F0vZ8sGsCZ5paCsk",
  "tags": []
}